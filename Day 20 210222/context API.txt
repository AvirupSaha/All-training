/*** https://sxneek.csb.app/ ***/
-----------------
in index.html >>

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, shrink-to-fit=no"
    />
    <meta name="theme-color" content="#000000" />
    <!--
      manifest.json provides metadata used when your web app is added to the
      homescreen on Android. See https://developers.google.com/web/fundamentals/engage-and-retain/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <link rel="shortcut icon" href="%PUBLIC_URL%/favicon.ico" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <!-- CSS only -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3"
      crossorigin="anonymous"
    />
    <title>React App</title>
  </head>

  <body>
    <noscript>
      You need to enable JavaScript to run this app.
    </noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

-----------------
in AddEntry.jsx >>

const AddEntry = () => {
  return (
    <div className="border border-info rounded p-4 mt-3">
      <form action="" className="form-group">
        <div className="form-group">
          <label htmlFor="description">Description</label>
          <input type="text" id="description" className="form-control" />
        </div>
        <div className="form-group">
          <label htmlFor="description">Amount</label>
          <input type="text" id="Amount" className="form-control" />
        </div>
      </form>
      <button className="btn btn-primary mt-3">Add Entry</button>
    </div>
  );
};
export default AddEntry;


---------------
in Entries.jsx >>

import { useContext } from "react";
import { ExpenseContext } from "../expense-context";
import Entry from "./Entry";

const Entries = () => {
  const { entries } = useContext(ExpenseContext);
  return (
    <div className="mt-3">
      <h4 className="display-6">Entries</h4>
      <hr />
      <div className="list-group">
        {entries.map((el) => {
          return <Entry entry={el} />;
        })}
      </div>
    </div>
  );
};
export default Entries;


----------------
in Entry.jsx >>

import { useContext } from "react";
import { ExpenseContext } from "../expense-context";

const Entry = (props) => {
  const { handleDelete } = useContext(ExpenseContext);
  return (
    <div>
      <li className="list-group-item list-group-item-action">
        {props.entry.description}
        <button
          className="btn-close float-end"
          onClick={() => {
            handleDelete(props.entry.id);
          }}
        ></button>
        <span className="float-end">${props.entry.amount}</span>
      </li>
    </div>
  );
};
export default Entry;


--------------
Summary.jsx >>

import { useContext } from "react";
import { ExpenseContext } from "../expense-context";

const Summary = () => {
  const { entries } = useContext(ExpenseContext);
  let income = 0;
  let expense = 0;
  entries.forEach((element) => {
    if (element.amount > 0) {
      income += element.amount;
    } else {
      expense += element.amount;
    }
  });
  console.log(entries);
  return (
    <div>
      <div className="row mt-3">
        <div className="col-sm-6">
          <div className="card border-success">
            <div className="card-body text-center ">
              <h5 className="card-title text-center">Income</h5>
              <h4 className="text-success-display-5">${income}</h4>
            </div>
          </div>
        </div>
        <div className="col-sm-6 mt-2">
          <div className="card border-danger">
            <div className="card-body text-center">
              <h5 className="card-title">Expense</h5>
              <h4>-${expense * -1}</h4>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
export default Summary;

---------------
TotalBalance.jsx >>

import { useContext } from "react";
import { ExpenseContext } from "../expense-context";

const TotalBalance = () => {
  const { entries } = useContext(ExpenseContext);
  console.log(entries);
  const tBalance = entries.reduce(
    (previousValue, currentValue) => previousValue + currentValue.amount,
    0
  );
  return (
    <div className="">
      <h2 className="display-3 text-center">${tBalance}</h2>
    </div>
  );
};
export default TotalBalance;


----------------
App.js >>

import AddEntry from "./components/AddEntry";
import Entries from "./components/Entries";
import Summary from "./components/Summary";
import TotalBalance from "./components/TotalBalance";
import { ExpenseProvider } from "./expense-context";
import "./styles.css";

export default function App() {
  return (
    <ExpenseProvider>
      <div className="container justify-content-center">
        <TotalBalance />
        <Summary />
        <AddEntry />
        <Entries />
      </div>
    </ExpenseProvider>
  );
}

---------------
expense-context.js >>
import { createContext, useState } from "react";

export const ExpenseContext = createContext();

export const ExpenseProvider = (props) => {
  const [entries, setEntries] = useState([
    { id: 1, description: "Pizza", amount: -99 },
    { id: 2, description: "Samosa", amount: -7 },
    { id: 3, description: "Dosa", amount: -15 },
    { id: 4, description: "Salary", amount: 200 },
    { id: 5, description: "Stocks", amount: 50 }
  ]);
  const handleDelete = (id) => {
    setEntries(entries.filter((entry) => entry.id !== id));
  };
  return (
    <ExpenseContext.Provider value={{ entries, handleDelete }}>
      {props.children}
    </ExpenseContext.Provider>
  );
};

---------------------

index.js >>

import { StrictMode } from "react";
import ReactDOM from "react-dom";

import App from "./App";

const rootElement = document.getElementById("root");
ReactDOM.render(
  <StrictMode>
    <App />
  </StrictMode>,
  rootElement
);

--------------